FORMAT: 1A
HOST: http://localhost:3003/api

# Mailtrain REST API Documentation

Mailtrain is a self hosted newsletter application built on Node.js (v14+) and MySQL (v8+) or MariaDB (v10+). 
This is the corresponding REST API documentation.

# Features
## Application

    - Subscriber lists management
    - List segmentation
    - Custom fields
    - Email templates (including MJML-based templates)
    - Custom reports
    - Automation (triggered and RSS campaigns)
    - Multiple users with granular user permissions and flexible sharing
    - Hierarchical namespaces for enterprise-level situations
    - Builtin Zone-MTA (https://github.com/zone-eu/zone-mta) for close-to-zero setup of mail delivery

## REST API 
    - Get subscribers of list
    - Subscribe to & unsubscribe from list
    - Delete subscription
    - Add custom fields
    - Blacklist email and remove email from blacklist
    - Get blacklisted email addresses
    - Get users subscriptions
    - Get lists in a namespace
    - Create and delete lists
    - Trigger fetch RSS campaigns
    - Send transactional emails

## Get subscribers [/subscriptions/:listCid?access_token=21w9h12s981e918ps0k1283sj012&limit=1&start=10]
### List all Subscriptions [GET]
Users may list all substribtion to a given list. 
They may further specify the wanted response with query params.

+ Response 200 (application/json)

        [
            {
                "data": {
                    "start":10,
                    "limit":1,
                    "subscriptions": [
                        {
                            "id":11,
                            "cid":"mYuYPPxZyA",
                            "email":"test-user@mail.com",
                            "hash_email":"+oFuatBxbUPfwUL+KyahNF2YWWPxtMT5VYD7CDhNKG8kJ4B1stuttAP3Bf5gu4W3X91lu5cZgiWCKWrd+pp36w==",
                            "source_email":13,
                            "opt_in_ip":null,
                            "opt_in_country":null,
                            "tz":null,
                            "status":1,
                            "is_test":0,
                            "status_change":"2022-03-25T13:11:03.000Z",
                            "unsubscribed":null,
                            "latest_open":null,
                            "latest_click":null,
                            "created":"2022-03-25T13:11:03.000Z",
                            "updated":"2022-03-25T13:11:03.000Z",
                            "custom_first_name_nkimafdbdm":"John",
                            "source_custom_first_name_nkimafdbdm":13,
                            "custom_last_name_qyripjydtq":"Doe",
                            "source_custom_last_name_qyripjydtq":13
                        }
                    ]
                }
            }
        ]
## Add subscription [/subscribe/:listCid?access_token=21w9h12s981e918ps0k1283sj012]
### Subscribe to List [POST]

Users may subscribe email addresses to subscription lists with this POST Endpoint.

+ Request (application/json)

        {
            "EMAIL": "test@mail.com",
            "MERGE_FIRST_NAME": "John",
            "MERGE_FIRST_NAME": "Doe",
            "TIMEZONE": "Europe/Berlin",
            "MERGE_CHECKBOX": "yes",
            "REQUIRE_CONFIRMATION": "yes",
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }


## Unsubscribe from list [/unsubscribe/:listCid?access_token=21w9h12s981e918ps0k1283sj012]
### Unsubscribe [POST]
+ Request (application/json)
+ Response 201 (application/json)
## Delete subscription [/delete/:listCid?access_token=21w9h12s981e918ps0k1283sj012]
### Delete subscription [POST]
+ Request (application/json)
+ Response 201 (application/json)

## Add new custom field [/field/:listCid?access_token=21w9h12s981e918ps0k1283sj012]
### Add field [POST] 
+ Request (application/json)
+ Response 201 (application/json)

## Get list of blacklisted emails [/blacklist/get?access_token=21w9h12s981e918ps0k1283sj012]
### Get list [GET]
+ Response 201 (application/json)

## Add email to blacklist [/blacklist/add?access_token=21w9h12s981e918ps0k1283sj012]
### Add to blacklist [POST]
+ Request (application/json)
+ Response 201 (application/json)

## Delete email from blacklist [/blacklist/delete?access_token=21w9h12s981e918ps0k1283sj012]
### Delete from blacklist [POST]
+ Request (application/json)
+ Response 201 (application/json)

## Get users subscriptions [/lists/:email?access_token=21w9h12s981e918ps0k1283sj012]
+ Response 201 (application/json)

## Get lists in a namespaces [/lists-by-namespace/:namespaceId?access_token=21w9h12s981e918ps0k1283sj012]
+ Response 201 (application/json)

## Create new list [/list/?access_token=21w9h12s981e918ps0k1283sj012]
### Create new list [POST]
+ Request (application/json)
+ Response 201 (application/json)

## Delete a list [/list/:listCid?access_token=21w9h12s981e918ps0k1283sj012]
### Delete a list [DELETE]
+ Request (application/json)
+ Response 201 (application/json)

## Trigger fetch RSS campaign [/rss/fetch/:campaignId?access_token=21w9h12s981e918ps0k1283sj012]
+ Response 201 (application/json)

## Send transactional email [/templates/:templateId/send/:campaignId?access_token=21w9h12s981e918ps0k1283sj012]
### Create new list [POST]
+ Request (application/json)
+ Response 201 (application/json)