{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.draft }}
        app: {{ template "fullname" . }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: PUBLIC_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.publicService.name }}
              key: url
        - name: SANDBOX_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.sandboxService.name }}
              key: url
        - name: TRUSTED_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.service.name }}
              key: url
        - name: MYSQL_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Chart.Name }}-db-credentials"
              key: hostname
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Chart.Name }}-db-credentials"
              key: password
        - name: MYSQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Chart.Name }}-db-credentials"
              key: username
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: "{{ .Chart.Name }}-db-credentials"
              key: database
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ $pval | quote }}
{{- end }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
